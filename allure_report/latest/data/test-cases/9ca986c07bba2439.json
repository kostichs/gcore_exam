{"uid":"9ca986c07bba2439","name":"Test dedicated servers prices","fullName":"tests.testApi.TestPage#test_dedicated_eur","historyId":"c1fa394b1acadb4f5087a77b057e8086","time":{"start":1706847694715,"stop":1706847694768,"duration":53},"description":"Check EUR and USD price","descriptionHtml":"<p>Check EUR and USD price</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nStacktrace:\n#0 0x55880b5bcf83 <unknown>\n#1 0x55880b275b2b <unknown>\n#2 0x55880b2b63ba <unknown>\n#3 0x55880b2eef94 <unknown>\n#4 0x55880b2e75bb <unknown>\n#5 0x55880b2e6e0f <unknown>\n#6 0x55880b23e2f8 <unknown>\n#7 0x55880b581531 <unknown>\n#8 0x55880b585455 <unknown>\n#9 0x55880b56df55 <unknown>\n#10 0x55880b5860ef <unknown>\n#11 0x55880b55199f <unknown>\n#12 0x55880b23c54f <unknown>\n#13 0x7f80a24d5d90 <unknown>","statusTrace":"self = <tests.testApi.TestPage object at 0x000002D01657C8F0>, browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"04640dbdbe182861bdf973def36fc2f7\")>, _min = 0\n_max = 0, _ser = 4, _cur = 1\n\n    @allure.title(\"Test dedicated servers prices\")\n    @allure.description(\"Check EUR and USD price\")\n    @pytest.mark.parametrize(\"_min, _max, _ser, _cur\", [(0, 0, DEDICATED, USD),\n                                                        (5, 5, DEDICATED, USD),\n                                                        (10, 10, DEDICATED, USD),\n                                                        (0, 0, DEDICATED, EUR),\n                                                        (5, 5, DEDICATED, EUR),\n                                                        (10, 10, DEDICATED, EUR),\n                                                        (0, 0, VIRTUAL, USD),\n                                                        (5, 5, VIRTUAL, USD),\n                                                        (10, 10, VIRTUAL, USD),\n                                                        (0, 0, VIRTUAL, EUR),\n                                                        (5, 5, VIRTUAL, EUR),\n                                                        (10, 10, VIRTUAL, EUR),\n                                                        ])\n    def test_dedicated_eur(self, browser, _min, _max, _ser, _cur):\n        self.main_page = MainPage(browser, self.URL)\n>       self.main_page.open()\n\ntests\\testApi.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:35: in open\n    self.driver.get(self.url)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D01657CB30>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id\",\"stacktrace\":\"#0 0x558...\\\\n#11 0x55880b55199f \\\\u003Cunknown>\\\\n#12 0x55880b23c54f \\\\u003Cunknown>\\\\n#13 0x7f80a24d5d90 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id\nE       Stacktrace:\nE       #0 0x55880b5bcf83 <unknown>\nE       #1 0x55880b275b2b <unknown>\nE       #2 0x55880b2b63ba <unknown>\nE       #3 0x55880b2eef94 <unknown>\nE       #4 0x55880b2e75bb <unknown>\nE       #5 0x55880b2e6e0f <unknown>\nE       #6 0x55880b23e2f8 <unknown>\nE       #7 0x55880b581531 <unknown>\nE       #8 0x55880b585455 <unknown>\nE       #9 0x55880b56df55 <unknown>\nE       #10 0x55880b5860ef <unknown>\nE       #11 0x55880b55199f <unknown>\nE       #12 0x55880b23c54f <unknown>\nE       #13 0x7f80a24d5d90 <unknown>\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidSessionIdException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"browser","time":{"start":1706847693062,"stop":1706847693451,"duration":389},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"afterStages":[{"name":"browser::0","time":{"start":1706847694923,"stop":1706847694940,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"attachmentsCount":0,"shouldDisplayMessage":false,"hasContent":false}],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"testApi"},{"name":"subSuite","value":"TestPage"},{"name":"host","value":"DESKTOP-Q0K3D1C"},{"name":"thread","value":"22828-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.testApi"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"_cur","value":"1"},{"name":"_max","value":"0"},{"name":"_min","value":"0"},{"name":"_ser","value":"4"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"9ca986c07bba2439.json","parameterValues":["1","0","0","4"]}