{"name": "Page loading", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: session deleted because of page crash\nfrom unknown error: cannot determine loading status\nfrom tab crashed\n  (Session info: chrome=120.0.6099.224)\nStacktrace:\n#0 0x55880b5bcf83 <unknown>\n#1 0x55880b275b2b <unknown>\n#2 0x55880b25d16d <unknown>\n#3 0x55880b25c882 <unknown>\n#4 0x55880b25b586 <unknown>\n#5 0x55880b25b44a <unknown>\n#6 0x55880b2597e1 <unknown>\n#7 0x55880b25a18a <unknown>\n#8 0x55880b26b07c <unknown>\n#9 0x55880b2837c1 <unknown>\n#10 0x55880b2896bb <unknown>\n#11 0x55880b25a92d <unknown>\n#12 0x55880b283459 <unknown>\n#13 0x55880b30e204 <unknown>\n#14 0x55880b2eee53 <unknown>\n#15 0x55880b2b6dd4 <unknown>\n#16 0x55880b2b81de <unknown>\n#17 0x55880b581531 <unknown>\n#18 0x55880b585455 <unknown>\n#19 0x55880b56df55 <unknown>\n#20 0x55880b5860ef <unknown>\n#21 0x55880b55199f <unknown>\n#22 0x55880b5aa008 <unknown>\n#23 0x55880b5aa1d7 <unknown>\n#24 0x55880b5bc124 <unknown>\n#25 0x7f80a2540ac3 <unknown>", "trace": "self = <tests.testApi.TestPage object at 0x000002D015C03B90>, browser = <selenium.webdriver.remote.webdriver.WebDriver (session=\"04640dbdbe182861bdf973def36fc2f7\")>\n\n    @allure.title(\"Page loading\")\n    @allure.description(\"This function loads the pages the first time, accepts all cookies and saves default values\")\n    def test_prepare_environment(self, browser):\n        global MIN_VALUE, MAX_VALUE\n        self.main_page = MainPage(browser, self.URL)\n>       self.main_page.open()\n\ntests\\testApi.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\base_page.py:35: in open\n    self.driver.get(self.url)\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:356: in get\n    self.execute(Command.GET, {\"url\": url})\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002D01657CB30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: session deleted because of page ...\\\\n#23 0x55880b5aa1d7 \\\\u003Cunknown>\\\\n#24 0x55880b5bc124 \\\\u003Cunknown>\\\\n#25 0x7f80a2540ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: session deleted because of page crash\nE       from unknown error: cannot determine loading status\nE       from tab crashed\nE         (Session info: chrome=120.0.6099.224)\nE       Stacktrace:\nE       #0 0x55880b5bcf83 <unknown>\nE       #1 0x55880b275b2b <unknown>\nE       #2 0x55880b25d16d <unknown>\nE       #3 0x55880b25c882 <unknown>\nE       #4 0x55880b25b586 <unknown>\nE       #5 0x55880b25b44a <unknown>\nE       #6 0x55880b2597e1 <unknown>\nE       #7 0x55880b25a18a <unknown>\nE       #8 0x55880b26b07c <unknown>\nE       #9 0x55880b2837c1 <unknown>\nE       #10 0x55880b2896bb <unknown>\nE       #11 0x55880b25a92d <unknown>\nE       #12 0x55880b283459 <unknown>\nE       #13 0x55880b30e204 <unknown>\nE       #14 0x55880b2eee53 <unknown>\nE       #15 0x55880b2b6dd4 <unknown>\nE       #16 0x55880b2b81de <unknown>\nE       #17 0x55880b581531 <unknown>\nE       #18 0x55880b585455 <unknown>\nE       #19 0x55880b56df55 <unknown>\nE       #20 0x55880b5860ef <unknown>\nE       #21 0x55880b55199f <unknown>\nE       #22 0x55880b5aa008 <unknown>\nE       #23 0x55880b5aa1d7 <unknown>\nE       #24 0x55880b5bc124 <unknown>\nE       #25 0x7f80a2540ac3 <unknown>\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException"}, "description": "This function loads the pages the first time, accepts all cookies and saves default values", "start": 1706847693452, "stop": 1706847694008, "uuid": "807aa780-f6e2-4182-91cc-458c925635e8", "historyId": "7d1d78131780ca25a1ed9624f432af5f", "testCaseId": "7d1d78131780ca25a1ed9624f432af5f", "fullName": "tests.testApi.TestPage#test_prepare_environment", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "testApi"}, {"name": "subSuite", "value": "TestPage"}, {"name": "host", "value": "DESKTOP-Q0K3D1C"}, {"name": "thread", "value": "22828-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.testApi"}]}